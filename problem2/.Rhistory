for(i in 2:n.tot){
current=samps[i-1,]
lam1=samps[i-1,1];lam2=samps[i-1,2];
b1=samps[i-1,3];b2=samps[i-1,4];
k=samps[i-1,5];
proposed[1] <- rgamma(1,shape=sum(x[1:k])+a,scale=b1/(k*b1+1));lam1= proposed[1];
proposed[2] <- rgamma(1,shape=sum(x[(k+1):N])+a,scale=b2/((N-k)*b2+1));lam2= proposed[2];
proposed[3] <- rinvgamma(1,a+c,scale=lam1+d);b1=proposed[3]
proposed[4] <- rinvgamma(1,a+c,scale=lam2+d);b2=proposed[4]
proposed[5] <- round(rbeta(1,2,2)*N);k=proposed[5]
logr=log.post.k(lam1,lam2,k,x)+log(dbeta(current[5]/N,2,2))-log(dbeta(proposed[5]/N,2,2))-log.post.k(current[1],current[2],current[5],x)
if(runif(1)<min(1,exp(logr))) {current=proposed;acc[i]=1;}
samps[i,]=current
}
keep=cbind(samps,acc);sim=keep[-(1:n.burn),]
sim
}
n.sim=5000
initial=c(1,1,1,1,50)
rwmh.sim=rwmh.samp(initial,n.sim,x,hyper)
sum(rwmh.sim[,6])/nrowrw(mh.sim)
sum(rwmh.sim[,6])/nrow(rwmh.sim)
mean(mh.sim[,1])
mean(mh.sim[,2])
mean(mh.sim[,5])
mh.samp <- function(initial,n.sim,x,hyper){
n.burn=n.sim*0.1;
n.tot=n.burn+n.sim
a=hyper[1];c=hyper[2];d=hyper[3]
samps=matrix(NA,nrow=n.tot,ncol=5);
samps[1,]=initial
acc=rep(0,n.tot)
proposed=rep(NA,5)
current=rep(NA,5);
for(i in 2:n.tot){
current=samps[i-1,]
lam1=samps[i-1,1];lam2=samps[i-1,2];
b1=samps[i-1,3];b2=samps[i-1,4];
k=samps[i-1,5];
proposed[1] <- rgamma(1,shape=sum(x[1:k])+a,scale=b1/(k*b1+1));lam1= proposed[1];
proposed[2] <- rgamma(1,shape=sum(x[(k+1):N])+a,scale=b2/((N-k)*b2+1));lam2= proposed[2];
proposed[3] <- rinvgamma(1,a+c,scale=lam1+d);b1=proposed[3]
proposed[4] <- rinvgamma(1,a+c,scale=lam2+d);b2=proposed[4]
proposed[5] <- sample(seq(1:49),1);k=proposed[5]
logr=log.post.k(lam1,lam2,k,x)-log.post.k(current[1],current[2],current[5],x)
if(runif(1)<min(1,exp(logr))) {current=proposed;acc[i]=1;}
samps[i,]=current
}
keep=cbind(samps,acc);sim=keep[-(1:n.burn),]
sim
}
n.sim=5000
initial=c(1,1,1,1,50)
mh.sim=mh.samp(initial,n.sim,x,hyper)
mean(mh.sim[,1])
mean(mh.sim[,2])
mean(mh.sim[,5])
mean(mh.sim[2000:n.sim,1])
mean(mh.sim[2000:n.sim,2])
mean(mh.sim[2000:n.sim,5])
n.sim=5000
initial=c(1,1,1,1,50)
mh2.samp <- function(initial,n.sim,x,hyper){
n.burn=n.sim*0.1;
n.tot=n.burn+n.sim
a=hyper[1];c=hyper[2];d=hyper[3]
samps=matrix(NA,nrow=n.tot,ncol=5);
samps[1,]=initial
acc=rep(0,n.tot)
proposed=rep(NA,5)
current=rep(NA,5);
for(i in 2:n.tot){
current=samps[i-1,]
lam1=samps[i-1,1];lam2=samps[i-1,2];
b1=samps[i-1,3];b2=samps[i-1,4];
k=samps[i-1,5];
proposed[1] <- rgamma(1,shape=sum(x[1:k])+a,scale=b1/(k*b1+1));lam1= proposed[1];
proposed[2] <- rgamma(1,shape=sum(x[(k+1):N])+a,scale=b2/((N-k)*b2+1));lam2= proposed[2];
proposed[3] <- rinvgamma(1,a+c,scale=lam1+d);b1=proposed[3]
proposed[4] <- rinvgamma(1,a+c,scale=lam2+d);b2=proposed[4]
proposed[5] <- round(rbeta(1,2,2)*N);k=proposed[5]
logr=log.post.k(lam1,lam2,k,x)+log(dbeta(current[5]/N,2,2))-log(dbeta(proposed[5]/N,2,2))-log.post.k(current[1],current[2],current[5],x)
if(runif(1)<min(1,exp(logr))) {current=proposed;acc[i]=1;}
samps[i,]=current
}
keep=cbind(samps,acc);sim=keep[-(1:n.burn),]
sim
}
n.sim=5000
initial=c(1,1,1,1,50)
mh2.sim=mh2.samp(initial,n.sim,x,c(1.2,6.1,1))
sum(mh2.sim[,6])/nrow(mh.sim)
ar(mfcol=c(3,3))
hist(mh2.sim[,1],breaks = 50,main = "",xlab="lambda1")
plot(mh2.sim[,1],type="l",main="trace plot of sampled mean 1")
acf(mh2.sim[,1],main="autocorrelation plot of sampled mean 1 ",ylab="lambda1")
hist(mh2.sim[,2],breaks = 50,main = "",xlab="lambda1")
plot(mh2.sim[,2],type="l",main="trace plot of sampled mean 2")
acf(mh2.sim[,2],main="autocorrelation plot of sampled mean 2 ",ylab="lambda2")
hist(mh2.sim[,5],breaks = 50,main = "",xlab="lambda1")
plot(mh2.sim[,5],type="l",main="trace plot of sampled change point",ylab="chang-point")
acf(mh2.sim[,5],main="autocorrelation plot of sampled change point")
x=seq(-0.9,0.9,0.2)
x=seq(-0.9,0.9,0.2)
x=seq(-0.9,0.9,0.2)
y=c(8,7.2,6.9,6.2,5.6,5,4.4,4,3.2,2.5)
y
x2=x**2
y=c(8,7.2,6.9,6.2,5.6,5,4.4,4,3.2,2.5)*9
x2=x**2
lm(y~x2+x)
x=seq(-0.9,0.9,0.2)
y=c(8,7.2,6.9,6.2,5.6,5,4.4,4,3.2,2.5)*9
lm(y ~ x + I(X^2))
lm(y ~ x + I(x^2))
x=seq(0.9,-0.9,-0.2)
x
lm(y ~ x + I(x^2))
plot(x,y)
lm(y ~ I(x^2)+x)
y=c(8,7.2,6.9,6.2,5.6,5,4.4,4,3.2,2.5)
lm(y ~ I(x^2)+x)
x
y
y=c(8,7.2,6.9,6.2,5.6,5,4.4,4,3.2,2.5)9*
lm(y ~ I(x^2)+x)
y=c(8,7.2,6.9,6.2,5.6,5,4.4,4,3.2,2.5)*9
lm(y ~ I(x^2)+x)
plot(x,-0.108*x**2+26.727*x+48.066)
y=c(8,7.2,6.9,6.2,5.6,5,4.4,4,3.2,2.5)/9
lm(y ~ I(x^2)+x)
y=c(8,7.2,6.9,6.2,5.6,5,4.4,4,3.2,2.5)
lm(y ~ I(x^2)+x)
lm(y ~ x)
y=c(8,7.2,6.9,6.2,5.6,5,4.4,4,3.2,2.5)*9
x=seq(0.9,-0.9,-0.2)
y=c(8,7.2,6.9,6.2,5.6,5,4.4,4,3.2,2.5)*9
lm(y ~ x)
?asin
asin(sqrt(0.048066))
sqrt(0.048066)
sin(0.221035)
cos(0.221035)
3*0.2192396*0.9756711
3*0.048066
-0.026227
3*0.048066-0.026227
0.144198/0.6417172
tan(0.2247065)
atan(0.2247065)
cos(0.2210351)
sin(0.2210351)
cos(0.2210351)
cos(0.2210351)/0.6417172
sin(0.2210351)
sin(0.2210351)/0.144198
0.2210351*0.117971
asin(-0.02607573)
(0.2210351-0.0267869)/2
lm(y ~ I(x^3)+I(x^2)+x)
x=seq(0.9,-0.9,-0.2)
x=seq(0.9,-0.9,-0.2)
x=seq(0.9,-0.9,-0.2)
y=c(8,7.2,6.9,6.2,5.6,5,4.4,4,3.2,2.5)*9/1000
lm(y ~ I(x^2)+x)
asin(sqrt(0.048066 ))
1/3/sin(0.221035)
asin(sqrt(0.048066 ))
C=  0.048066
B= 0.026727
asin(sqrt(C))
asin(B/3/sqrt(C)-sqrt(C))
e1=asin(sqrt(C))
s=asin(B/3/sqrt(C)-sqrt(C))
(e1+s)/2
y2=y*5/100
y2
lm(y2 ~ I(x^2)+x)
C=  0.0024033
e1=asin(sqrt(C))
asin(sqrt(C))
C=  0.0024033
B= 0.0013364
e1=asin(sqrt(C))
asin(B/3/sqrt(C)-sqrt(C))
(e1+s)/2
x=seq(0.9,-0.9,-0.2)
y=c(8,7.2,6.9,6.2,5.6,5,4.4,4,3.2,2.5)*9/1000
y2=y*5/100
lm(y ~ x)
lm(y ~ x+I(x^2))
lm(y ~ x+I(x^2)+I(x^3))
C=  0.048066
lm(y ~ x+I(x^2)+I(x^3))
lm(y ~ x+I(x^2)+I(x^3)+I(x^4))
getwd()
setwd("/Users/yierwan/Dropbox/PHYS8601/problem2")
pro=read.table("singlerunforR")
pro=read.table("singlerunforR.dat")
pro=read.table("siglerunforR.dat")
View(pro)
View(pro)
pro=read.table("siglerunforR.dat")
V1*V2
attach(pro)
V1*V2
V1
pro=read.table("siglerunforR.dat",header=T)
attach(pro)
Va
V1
p
p*L50
sum(p*L50)/sum(L50)
sum(p*L50)/sum(p)
sum(p*L50)/10
sum(p*L50)/sum(p)
sum(p*L150)/sum(p)
sum(p*L100)/sum(p)
sum(p*L150)/sum(p)
sum(p*L150)
pro=read.table("siglerunforR.dat",header=T)
attach(pro)
attach(pro)
sum(p*L200)/sum(p)
pro3=read.table("outfor3.dat",header=T)
View(pro3)
View(pro3)
pro3=read.table("outfor3.dat",header=T)
n=1799
View(pro3)
View(pro3)
pro3=read.table("outfor3.dat",header=T)
n=1799
View(pro3)
View(pro3)
attach(pro3)
for(i in 1:n){}
for(i in 1:n){}
for(i in 1:n){}
size[1]=0
pro3=read.table("outfor3.dat",header=T)
attach(pro3)
n=1799
s[1]=0
s[1:n]=0
s=[];
dis=matrix(NA,n,2)
View(dis)
View(dis)
dis[1,1]=size[1]
View(dis)
View(dis)
View(pro3)
View(pro3)
View(pro3)
View(pro3)
size[1]
size[2]
pro3=read.table("outfor3.dat",header=T)
attach(pro3)
n=1799
dis=matrix(NA,n,2)
count=0;
dis[1,1]=size[1]
View(pro3)
View(pro3)
View(dis)
View(dis)
dis[1,2]++
for(i in 1:n)
size[2]l
dis[1,2]=dis[1,2]+1
View(dis)
View(dis)
dis=matrix(0,n,2)
count=0;
dis[1,1]=size[1]
dis[1,2]=dis[1,2]+1
View(dis)
View(dis)
count=count+1
for(i in 1:n)
{
x=size[i];
for( j in 1:count){
if(x!=dis[j,1]){}
}
}
for(i in 1:10)
{
x=size[i];
for( j in 1:count)
{
if(x!=dis[j,1])
{
count=count+1
dis[count,1]=size[i]
dis[count,2]=dis[count,2]+1
}
}
}
View(dis)
View(dis)
for(i in 1:10)
{
x=size[i];
flag=0;
for( j in 1:count)
{
if(x==dis[j,1]){dis[j,2]=dis[j,2]+1;flag=1;}
}
if(flag==0){
count=count+1
dis[count,1]=size[i]
dis[count,2]=dis[count,2]+1
}
}
View(dis)
View(dis)
View(pro3)
View(pro3)
for(i in 1:10)
{
x=size[i];
flag=0;
for( j in 1:count)
{
if(x==dis[j,1]){dis[j,2]=dis[j,2]+1;flag=1;}
}
if(flag==0){
count=count+1
dis[count,1]=size[i]
dis[count,2]=dis[count,2]+1
}
}
pro3=read.table("outfor3.dat",header=T)
attach(pro3)
n=1799
dis=matrix(0,n,2)
count=1;
dis[count,1]=size[1]
dis[count,2]=dis[count,2]+1
for(i in 1:10)
{
x=size[i];
flag=0;
for( j in 1:count)
{
if(x==dis[j,1]){dis[j,2]=dis[j,2]+1;flag=1;}
}
if(flag==0){
count=count+1
dis[count,1]=size[i]
dis[count,2]=dis[count,2]+1
}
}
View(dis)
View(dis)
View(pro3)
View(pro3)
dis=matrix(0,n,2)
count=1;
dis[count,1]=size[1]
dis[count,2]=dis[count,2]+1
for(i in 2:10)
{
x=size[i];
flag=0;
for( j in 1:count)
{
if(x==dis[j,1]){dis[j,2]=dis[j,2]+1;flag=1;}
}
if(flag==0){
count=count+1
dis[count,1]=size[i]
dis[count,2]=dis[count,2]+1
}
}
View(dis)
View(dis)
dis=matrix(0,n,2)
count=1;
dis[count,1]=size[1]
dis[count,2]=dis[count,2]+1
for(i in 2:20)
{
x=size[i];
flag=0;
for( j in 1:count)
{
if(x==dis[j,1]){dis[j,2]=dis[j,2]+1;flag=1;}
}
if(flag==0){
count=count+1
dis[count,1]=size[i]
dis[count,2]=dis[count,2]+1
}
}
View(dis)
View(dis)
dis=matrix(0,n,2)
count=1;
dis[count,1]=size[1]
dis[count,2]=dis[count,2]+1
for(i in 2:n)
{
x=size[i];
flag=0;
for( j in 1:count)
{
if(x==dis[j,1]){dis[j,2]=dis[j,2]+1;flag=1;}
}
if(flag==0){
count=count+1
dis[count,1]=size[i]
dis[count,2]=dis[count,2]+1
}
}
View(dis)
View(dis)
dis[:,2]/V
dis[3,2]
View(dis)
View(dis)
dis[:,2]
dis[,2]
dis2=dis[,2]/V
V=250*250
dis2=dis[,2]/V
dis2=dis[,2]/V
plot(dis2,dis[,1])
x=dis[,1];
y=dis[,2]/V;
plot(x,y)
y=dis[,2];
plot(x,y)
plot(x,y)
y=dis[,2]/V;
max(dis[,2])
plot(x,y)
lm(y~x)
ob=lm(y~x)
summary(ob)
x=log(dis[,1]);
y=log(dis[,2]/V);
plot(x,y)
ob=lm(y~x)
summary(ob)
ob=lm(y~x)
x=ln(dis[,1]);
y=ln(dis[,2]/V);
x=log(dis[,1]);
y=log(dis[,2]/V);
is.na(x)
which(is.na(x))
x=log(dis[,1]);
y=log(dis[,2]/V);
plot(x,y)
ob=lm(y~x)
summary(ob)
x
x=log(dis[1:count,1]);
x
y=log(dis[1:count,2]/V);
plot(x,y)
max(dis[,2])
x=log(dis[1:count,1]);
y=log(dis[1:count,2]/V);
plot(x,y)
ob=lm(y~x)
summary(ob)
max(dis[,1])
which(max(dis[,1]))
which(dis[,1]==max(dis[,1]))
max(x)
View(dis)
View(dis)
y=log(dis[1:count,2]/V);
min(y)
View(dis)
View(dis)
dis[1:81,]
dis2=dis
dis2=dis2[1:count,2]/V);
dis2=dis2[1:count,2]/V;
dis2=dis
dis2=dis2[1:count,2]/V
dis2=dis
dis2[1:count,2]=dis2[1:count,2]/V
View(dis2)
View(dis2)
View(dis)
View(dis)
dis2
dis2[1:81,]
ob=lm(y~x)
summary(ob)
max(x)
plot(x,y)
ob=lm(y~x)
summary(ob)
max(x)
plot(x,y)
x=log10(dis[1:count,1]);
y=log10(dis[1:count,2]/V);
plot(x,y)
ob=lm(y~x)
summary(ob)
a=10^(-3.2653)
lm(y~x)
summary(lm(y~x))
